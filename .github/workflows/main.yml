import sounddevice as sd
import soundfile as sf
import librosa
import heartpy as hp
import requests
import json
import geocoder
import datetime
import pytz
import random
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error
from twilio.rest import Client

# Define a list of dangerous situations and their corresponding stress levels
dangerous_situations = {
    'fire': 8,
    'earthquake': 9,
    'flood': 7,
    'gas leak': 6,
    'gunshots': 10,
    'explosion': 9
}

# Define a list of medical professionals and their locations
medical_professionals = {
    'nurse': [('New York', (40.7128, -74.0060)), ('Los Angeles', (34.0522, -118.2437))],
    'doctor': [('Chicago', (41.8781, -87.6298)), ('Houston', (29.7604, -95.3698))],
    'paramedic': [('Philadelphia', (39.9526, -75.1652)), ('Phoenix', (33.4484, -112.0740))]
}

# Prompt user for input
user_input = input("What's happening? ")

# Check if user input matches a dangerous situation
if user_input.lower() in dangerous_situations:
    # If input matches a dangerous situation, play a sound alert
    filename = 'alert_sound.wav'
    data, sr = sf.read(filename, dtype='float32')
    sd.play(data, sr)
    sd.wait()
    
    # Detect stress level based on heart rate, breathing rate, and other physiological factors
    duration = 30  # duration of measurement in seconds
    sample_rate = 22050  # sample rate for audio recording
    recording = sd.rec(duration * sample_rate, samplerate=sample_rate, channels=1)
    sd.wait()  # wait for sound recording to finish
    signal, sr = librosa.load(recording, sr=sample_rate)
    
    # Compute heart rate and breathing rate from audio signal
    filtered_signal = hp.filter_signal(signal, cutoff=[0.8, 3.5], sample_rate=sample_rate, order=3, filtertype='bandpass')
    wd, measures = hp.process(filtered_signal, sample_rate, report_time=False)
    heart_rate = measures['bpm']
    breathing_rate = 60 / (wd['resp_rate_ts'][1] - wd['resp_rate_ts'][0])
    
    # Compute stress level based on heart rate, breathing rate, and other physiological factors
    stress_level = 0.5 * (heart_rate / 80) + 0.5 * (breathing_rate / 20)
    
    # Get user's baseline physiological state from a user profile or wearable device
    baseline_heart_rate = 70
    baseline_breathing_rate = 15
    
    # Adjust stress level based on user's baseline physiological state
    stress_level = stress_level * (1 + (heart_rate - baseline_heart_rate) / baseline_heart_rate) \
                    * (1 + (breathing_rate - baseline_breathing_rate) / baseline_breathing_rate)
    
    # Get user's location
    g = geocoder.ip('me')
    user_location = (g.city, g.latlng
